package chunk

import (
	"bytes"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestReadChunk_FullSimple(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatFull << 6),
		0x00, 0x00, 0x12,
		0x00, 0x00, 0x04,
		0x10,
		0x00, 0x00, 0x00, 0x01,
		'b', 'a', 'k', 'a',
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, []byte{'b', 'a', 'k', 'a'}, ch.Data.Bytes())
	assert.EqualValues(t, 0x12, ch.Timestamp)
	assert.EqualValues(t, 0x11, ch.Delta)
	assert.EqualValues(t, 0x04, ch.Length)
	assert.EqualValues(t, 0x10, ch.TypeID)
	assert.EqualValues(t, 0x01, ch.StreamID)
}

func TestReadChunk_FullExtended(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatFull << 6),
		0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x04,
		0x10,
		0x00, 0x00, 0x00, 0x01,
		0x01, 0x00, 0x00, 0x00,
		'b', 'a', 'k', 'a',
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, []byte{'b', 'a', 'k', 'a'}, ch.Data.Bytes())
	assert.EqualValues(t, 0x1000000, ch.Timestamp)
	assert.EqualValues(t, 0xFFFFFF, ch.Delta)
	assert.EqualValues(t, 0x04, ch.Length)
	assert.EqualValues(t, 0x10, ch.TypeID)
	assert.EqualValues(t, 0x01, ch.StreamID)
}

func TestReadChunk_MediumSimple(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatMedium << 6),
		0x00, 0x00, 0x12,
		0x00, 0x00, 0x04,
		0x10,
		'b', 'a', 'k', 'a',
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, []byte{'b', 'a', 'k', 'a'}, ch.Data.Bytes())
	assert.EqualValues(t, 0x13, ch.Timestamp)
	assert.EqualValues(t, 0x12, ch.Delta)
	assert.EqualValues(t, 0x04, ch.Length)
	assert.EqualValues(t, 0x10, ch.TypeID)
	assert.EqualValues(t, 0x00, ch.StreamID)
}

func TestReadChunk_MediumExtended(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatMedium << 6),
		0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x04,
		0x10,
		0x01, 0x00, 0x00, 0x00,
		'b', 'a', 'k', 'a',
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, []byte{'b', 'a', 'k', 'a'}, ch.Data.Bytes())
	assert.EqualValues(t, 0x1000001, ch.Timestamp)
	assert.EqualValues(t, 0x1000000, ch.Delta)
	assert.EqualValues(t, 0x04, ch.Length)
	assert.EqualValues(t, 0x10, ch.TypeID)
	assert.EqualValues(t, 0x00, ch.StreamID)
}

func TestReadChunk_ShortSimple(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatShort << 6),
		0x00, 0x00, 0x12,
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, 0x13, ch.Timestamp)
	assert.EqualValues(t, 0x12, ch.Delta)
	assert.EqualValues(t, 0x00, ch.Length)
	assert.EqualValues(t, 0x00, ch.TypeID)
	assert.EqualValues(t, 0x00, ch.StreamID)
}

func TestReadChunk_ShortExtended(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatShort << 6),
		0xFF, 0xFF, 0xFF,
		0x01, 0x00, 0x00, 0x00,
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, 0x1000001, ch.Timestamp)
	assert.EqualValues(t, 0x1000000, ch.Delta)
	assert.EqualValues(t, 0x00, ch.Length)
	assert.EqualValues(t, 0x00, ch.TypeID)
	assert.EqualValues(t, 0x00, ch.StreamID)
}

func TestReadChunk_None(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatNone << 6),
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, 0x01, ch.Timestamp)
	assert.EqualValues(t, 0x00, ch.Delta)
	assert.EqualValues(t, 0x00, ch.Length)
	assert.EqualValues(t, 0x00, ch.TypeID)
	assert.EqualValues(t, 0x00, ch.StreamID)
}

func TestReadChunk_FormatTwo(t *testing.T) {
	data := []byte{
		0x00 | (HeaderFormatNone << 6),
		0xF0,
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x130, ch.ID)
	assert.EqualValues(t, 0x01, ch.Timestamp)
	assert.EqualValues(t, 0x00, ch.Delta)
	assert.EqualValues(t, 0x00, ch.Length)
	assert.EqualValues(t, 0x00, ch.TypeID)
	assert.EqualValues(t, 0x00, ch.StreamID)
}

func TestReadChunk_FormatThree(t *testing.T) {
	data := []byte{
		0x01 | (HeaderFormatNone << 6),
		0xF0, 0x01,
	}
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(bytes.NewReader(data))
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0xf041, ch.ID)
	assert.EqualValues(t, 0x01, ch.Timestamp)
	assert.EqualValues(t, 0x00, ch.Delta)
	assert.EqualValues(t, 0x00, ch.Length)
	assert.EqualValues(t, 0x00, ch.TypeID)
	assert.EqualValues(t, 0x00, ch.StreamID)
}

func TestReadChunk_Multichunk(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatFull << 6),
		0x00, 0x00, 0x12,
		0x00, 0x00, 0x90,
		0x10,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
		0x04 | (HeaderFormatFull << 6),
		0x00, 0x00, 0x11,
		0x00, 0x00, 0x04,
		0x11,
		0x00, 0x00, 0x00, 0x02,
		'b', 'a', 'k', 'a',
		0x03 | (HeaderFormatNone << 6),
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	}
	r := bytes.NewReader(data)
	chs := NewChunks(time.Now(), 1)
	ch, err := chs.ReadChunk(r)
	assert.NoError(t, err)
	assert.False(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
	}, ch.Data.Bytes())
	assert.EqualValues(t, 0x12, ch.Timestamp)
	assert.EqualValues(t, 0x11, ch.Delta)
	assert.EqualValues(t, 0x90, ch.Length)
	assert.EqualValues(t, 0x10, ch.TypeID)
	assert.EqualValues(t, 0x01, ch.StreamID)

	ch, err = chs.ReadChunk(r)
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x04, ch.ID)
	assert.EqualValues(t, []byte{'b', 'a', 'k', 'a'}, ch.Data.Bytes())
	assert.EqualValues(t, 0x11, ch.Timestamp)
	assert.EqualValues(t, 0x10, ch.Delta)
	assert.EqualValues(t, 0x04, ch.Length)
	assert.EqualValues(t, 0x11, ch.TypeID)
	assert.EqualValues(t, 0x02, ch.StreamID)

	ch, err = chs.ReadChunk(r)
	assert.NoError(t, err)
	assert.True(t, ch.Complete())
	assert.EqualValues(t, 0x03, ch.ID)
	assert.EqualValues(t, []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	}, ch.Data.Bytes())
	assert.EqualValues(t, 0x12, ch.Timestamp)
	assert.EqualValues(t, 0x11, ch.Delta)
	assert.EqualValues(t, 0x90, ch.Length)
	assert.EqualValues(t, 0x10, ch.TypeID)
	assert.EqualValues(t, 0x01, ch.StreamID)
}

func TestReadMessage_Multichunk(t *testing.T) {
	data := []byte{
		0x03 | (HeaderFormatFull << 6),
		0x00, 0x00, 0x12,
		0x00, 0x00, 0x90,
		0x10,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
		0x04 | (HeaderFormatFull << 6),
		0x00, 0x00, 0x11,
		0x00, 0x00, 0x04,
		0x11,
		0x00, 0x00, 0x00, 0x02,
		'b', 'a', 'k', 'a',
		0x03 | (HeaderFormatNone << 6),
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	}
	epoch := time.Now()
	r := bytes.NewReader(data)
	chs := NewChunks(epoch, 1)
	m, err := chs.ReadMessage(r)
	assert.NoError(t, err)
	assert.EqualValues(t, 0x04, m.ChunkID)
	assert.EqualValues(t, []byte{'b', 'a', 'k', 'a'}, m.Data)
	assert.EqualValues(t, epoch.Add(0x10*time.Millisecond), m.Timestamp)
	assert.EqualValues(t, 0x10*time.Millisecond, m.Delta)
	assert.EqualValues(t, 0x04, m.Length)
	assert.EqualValues(t, 0x11, m.Type)
	assert.EqualValues(t, 0x02, m.StreamID)

	m, err = chs.ReadMessage(r)
	assert.NoError(t, err)
	assert.EqualValues(t, 0x03, m.ChunkID)
	assert.EqualValues(t, []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	}, m.Data)
	assert.EqualValues(t, epoch.Add(0x11*time.Millisecond), m.Timestamp)
	assert.EqualValues(t, 0x11*time.Millisecond, m.Delta)
	assert.EqualValues(t, 0x90, m.Length)
	assert.EqualValues(t, 0x10, m.Type)
	assert.EqualValues(t, 0x01, m.StreamID)
}
